<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Brandon Furtwangler</title>
  <subtitle>code, drones and more</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://brandf.github.io/"/>
  <updated>2016-10-15T02:35:30.845Z</updated>
  <id>https://brandf.github.io/</id>
  
  <author>
    <name>Brandon Furtwangler</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Setting up a modern webgl environment - part 2</title>
    <link href="https://brandf.github.io/2016/10/14/modern-webgl-environment-part2/"/>
    <id>https://brandf.github.io/2016/10/14/modern-webgl-environment-part2/</id>
    <published>2016-10-15T05:52:57.000Z</published>
    <updated>2016-10-15T02:35:30.845Z</updated>
    
    <content type="html"><![CDATA[<p>In the last post we began to setup a modern javascript build system. If you didn’t read it, you can catch up here:</p>
<p><a href="https://brandf.github.io/2016/10/10/modern-webgl-environment-part1/">https://brandf.github.io/2016/10/10/modern-webgl-environment-part1/</a></p>
<p>In this post we’re going to continue and setup babel, eslint, and editorconfig. At that point you’ll have an awesome environment to create the next great web app.</p>
<p>If you were following along in part 1, you can continue where we left off, otherwise clone this repo to catch up:</p>
<p><a href="https://github.com/brandf/brandf-environment-part1.git" target="_blank" rel="external">https://github.com/brandf/brandf-environment-part1.git</a></p>
<p>The first thing we’re going to do is setup an editor config. This is nice to have in an open source project because you don’t know what editor folks are going to use, and so this is a common way to describe what settings they should use.</p>
<p>Simply create a file named .editorconfig that looks like this:<br><figure class="highlight ini"><figcaption><span>.editorconfig</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># http://EditorConfig.org</span></div><div class="line"><span class="attr">root</span> = <span class="literal">true</span></div><div class="line"><span class="section"></span></div><div class="line">[*]</div><div class="line"><span class="attr">end_of_line</span> = lf</div><div class="line"><span class="attr">insert_final_newline</span> = <span class="literal">true</span></div><div class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">true</span></div><div class="line"><span class="attr">charset</span> = utf-<span class="number">8</span></div><div class="line"><span class="attr">indent_style</span> = space</div><div class="line"><span class="attr">indent_size</span> = <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>I’m using Visual Studio Code, which doesn’t support .editorconfig out of the box, so I needed to install an extension.  Hit Ctrl+P, and type “ext EditorConfig” to open the extensions. Install “EditorConfig for VS Code”.</p>
<p>Now you can test it out by modifying a file to have a trailing space, or no new line, and see if it trims when you save.</p>
<p>Next let’s install a transpiler called Babel.  Babel lets you write modern javascript, and compile it down to older javascript (most likely ES5).  Babel also acts as a platform for various other language extensions such as JSX (more on this in a future post).</p>
<p>First we need to get the babel package from npm:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm install --save-dev babel-core</div></pre></td></tr></table></figure></p>
<p>Now we could kick it off manually, but we already have webpack setup so let’s have webpack run babel on all javascript files as part of the bundling process.</p>
<p>The babel loader module does this for us:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm install --save-dev babel-loader</div></pre></td></tr></table></figure></p>
<p>Next we need to setup webpack to use the loader. Add this to the webpack config:<br><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">  <span class="attr">loaders</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">      <span class="attr">loaders</span>: [<span class="string">'babel'</span>],</div><div class="line">    &#125;,</div><div class="line">  ],</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>At this point, babel will run, but it doesn’t do much unless we tell it what transformations we want.  To do this, we need a babel config file:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">echo</span> <span class="string">'&#123; "presets": ["latest"], "plugins": ["transform-runtime"] &#125;'</span> &gt; .babelrc</div></pre></td></tr></table></figure></p>
<p>Next install the package for the preset and plugin:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; npm install babel-preset-latest --save-dev</div><div class="line">&gt; npm install babel-plugin-transform-runtime --save-dev</div></pre></td></tr></table></figure></p>
<p>At the time of this writing, the ‘latest’ preset brings in es2015, es2016, and es2017 language features. The transform plugin is needed to make generators/async work. Now it’s time to write some modern javascript!</p>
<p>Replace your app.js with this:<br><figure class="highlight javascript"><figcaption><span>src/app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">async</span> doIt() &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">      <span class="keyword">await</span> Foo.delay(<span class="number">1</span>);</div><div class="line">      <span class="built_in">document</span>.body.appendChild(<span class="built_in">document</span>.createTextNode(i));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">static</span> delay(seconds) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        res();</div><div class="line">      &#125;, seconds * <span class="number">1000</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">Foo.doIt();</div></pre></td></tr></table></figure></p>
<p>The above is just some toy code to exercise javascript classes (from es2015) and async methods (from es2017).</p>
<p>To see it in action, just launch the server<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm run start</div></pre></td></tr></table></figure></p>
<p>You can play around with it while the server is running and it will reload every time you save.</p>
<p>Now that we’re writing javascript, we’ll soon get annoyed by simple typos causing bugs that aren’t discovered until runtime. YAY dynamic languages. One way to combat this is with static analysis. Since we already have a build step for bundling, we would like to find out about common mistakes at build time instead of runtime.</p>
<p>eslint is great for this. Not only does it find mistakes like typos, but it also keeps the code clean/consistent by enforcing coding standards such as brace style, naming conventions, etc.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm install eslint-loader --save-dev</div></pre></td></tr></table></figure></p>
<p>And then we need to add it to our loaders list.  Make sure it’s the right-most loader so it runs first.<br><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">  <span class="attr">loaders</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">      <span class="attr">loaders</span>: [<span class="string">'babel'</span>, <span class="string">'eslint'</span>],</div><div class="line">    &#125;,</div><div class="line">  ],</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>Similar to how we configured babel, we’re going to configure eslint with .eslintrc.  You can use different rules to suit your taste, but the airbnb set are a good starting point.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install eslint-config-airbnb --save-dev</div></pre></td></tr></table></figure></p>
<figure class="highlight json"><figcaption><span>.eslintrc</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"extends"</span>: <span class="string">"airbnb"</span>,</div><div class="line">  <span class="attr">"rules"</span>: &#123;</div><div class="line">    <span class="attr">"no-plusplus"</span>: <span class="string">"off"</span>,</div><div class="line">    <span class="attr">"no-param-reassign"</span>: [<span class="string">"error"</span>, &#123; <span class="attr">"props"</span>: <span class="literal">false</span> &#125;]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"env"</span>: &#123;</div><div class="line">    <span class="attr">"browser"</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Note that I customized a few rules on top of airbnb.</p>
<p>Now when we build, we will get warnings/errors if our code violates the rules.  At that point you have two options 1) fix the issues 2) override the rule. Sometimes it makes sense to override it because you know what you’re doing and the rule is to prevent something accedental like using | instead of ||.  One way to override it is to do something like this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// eslint-disable-next-line no-bitwise</span></div><div class="line">gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</div></pre></td></tr></table></figure>
<p>Similar to editorconfig, you may want to setup your editor to run eslint. To do that in visual studio code, you type CTRL+P, then “ext ESLint”, and install it.  You may also need to install the package globally</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm install eslint -g</div></pre></td></tr></table></figure>
<p>You may need to close/reopen VS Code, and now you’ll get red squiggles every time you violate an eslint rule.  Try adding a space between a function and it’s opening param…bad developer!</p>
<p>That’s all for part 2.  We now have a pretty sophisticated build environment that lets us use the latest language features while still being able to target common browsers. </p>
<p>You can find the end result here: <a href="https://github.com/brandf/brandf-environment-part2.git" target="_blank" rel="external">https://github.com/brandf/brandf-environment-part2.git</a></p>
<p>In part 3 we’ll add some packages to help use WebGL and some babel loaders that help us with CSS and GLSL.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In the last post we began to setup a modern javascript build system. If you didn’t read it, you can catch up here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https:
    
    </summary>
    
      <category term="Coding" scheme="https://brandf.github.io/categories/Coding/"/>
    
    
      <category term="webgl" scheme="https://brandf.github.io/tags/webgl/"/>
    
      <category term="webpack" scheme="https://brandf.github.io/tags/webpack/"/>
    
      <category term="babel" scheme="https://brandf.github.io/tags/babel/"/>
    
      <category term="es2015" scheme="https://brandf.github.io/tags/es2015/"/>
    
      <category term="javascript" scheme="https://brandf.github.io/tags/javascript/"/>
    
      <category term="node" scheme="https://brandf.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Setting up a modern webgl environment - part 1</title>
    <link href="https://brandf.github.io/2016/10/10/modern-webgl-environment-part1/"/>
    <id>https://brandf.github.io/2016/10/10/modern-webgl-environment-part1/</id>
    <published>2016-10-11T04:23:57.000Z</published>
    <updated>2016-10-11T22:57:20.594Z</updated>
    
    <content type="html"><![CDATA[<p>With modern browsers, node.js, and github, the javascript ecosystem has grown tremendously.  While the language is evolving, user adoption is lagging behind, so developers must make a choice: limit yourself to commonly adopted features (such as ES5), or use a build system to take advantage of modern features and ‘compile’ it down to ES5.</p>
<p>In this post, I’m going to describe how I setup the latter, specifically for making a website that is using WebGL. If you’ve been paying attention over the last few years, you will have noticed that there are plenty of options for javascript build system tools, and it can be confusing what to use and how to set it up so I’m going to focus on what I believe is the simplest system that gives you the most bang for your buck.</p>
<p>Specifically, in this and subsequent posts we’re going build an environment that uses the following tools:</p>
<ul>
<li>git (for source control)</li>
<li>node/npm (for package management)</li>
<li>webpack (for bundling)</li>
<li>babel (for es2017 transpiling)</li>
<li>eslint (for static analysis)</li>
<li>editorconfig (for editor settings)</li>
</ul>
<p>Instead of just giving you a yeoman generator that drops a complicated build system in your lap, we’re going to build it up piece by piece from scratch.</p>
<p>First, we need to decide how we’re going to execute the build process.  For this, I think the choice is easy - Node.js. Your team is presumably already familiar with javascript, so writing the build system in javascript is a natural choice. Node also ships with a fantastic package manager (npm), so this will make it easy to pull in 3rd party dependencies like webpack and babel.</p>
<p>If you don’t have it already, go ahead and install Node.js from <a href="https://nodejs.org/" target="_blank" rel="external">https://nodejs.org/</a></p>
<p>We’re going to be using github for source control, if you don’t have it, you can get the client from <a href="https://desktop.github.com/" target="_blank" rel="external">https://desktop.github.com/</a></p>
<p>Now create a new github repro.  I typically do this from here <a href="https://github.com/new" target="_blank" rel="external">https://github.com/new</a>.</p>
<p>After creating the repo, you’ll get a link that looks like this: <a href="https://github.com/brandf/brandf-environment-part1.git" target="_blank" rel="external">https://github.com/brandf/brandf-environment-part1.git</a>, only with your username/repro instead of mine.</p>
<p>Now open up a terminal and we’ll setup a node package for our project.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; git <span class="built_in">clone</span> &lt;link_to_repo&gt;</div><div class="line">&gt; <span class="built_in">cd</span> &lt;repo_name&gt;</div><div class="line">&gt; npm init</div></pre></td></tr></table></figure></p>
<p>Answer the questions, and you’ll have yourself a package.json file.  This is a manifest file that npm uses to track your projects dependencies, as well as other metadata in case you decide to publish this module to npm.</p>
<p>At this point there are several directions we could go - Grunt, Gulp, Browserify, etc are commonly used, but for this project I think Webpack is a great choice.  Webpack will do a few things for us </p>
<p>1) it understands modules, and even node<br>packages, so you can easily write modular javascript and Webpack will bundle it all together into something that is easy<br>to consume in a browser.<br>2) It coordinates the execution of various other tools, which can transform your code.  We will<br>use this to write modern javascript and have it transpiled (via babel) down to ES5.</p>
<p>To setup webpack, we first need to install it via npm:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm install webpack --save-dev</div></pre></td></tr></table></figure></p>
<p>Then we’re going to put the webpack configuration in a file called webpack.config.js:<br><figure class="highlight"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  entry: './src/app.js',</div><div class="line">  output: &#123;</div><div class="line">    path: './bin/',</div><div class="line">    publicPath: '/bin/',</div><div class="line">    filename: 'bundle.js',</div><div class="line">    sourceMapFilename: '[file].map',</div><div class="line">    devtoolModuleFilenameTemplate: 'webpack:///[resource-path]?[loaders]',</div><div class="line">  &#125;,</div><div class="line">  devtool: 'source-map',</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>This tells webpack that src/app.js is our entry point, and it will traverse all the module dependencies and bundle them up into bin/bundle.js. It will also produce source maps for bundle.js that let you debug the original source files rather than the generated bundle.js file.</p>
<p>For now we’ll just make a placeholder entry point:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; mkdir ./src</div><div class="line">&gt; mkdir ./bin</div><div class="line">&gt; <span class="built_in">echo</span> <span class="string">"document.write('hello world');"</span> &gt; ./src/app.js</div></pre></td></tr></table></figure></p>
<p>We can now build the bundle, to produce bin/bundle.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; ./node_modules/.bin/webpack</div></pre></td></tr></table></figure><br>We run it out of the node modules so that we don’t have any global dependencies except node.js.</p>
<p>To test this, we need to host the bundle in an html file:<br><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"gl"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bin/bundle.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Note that I put this in the root of the project to make it easy to use with github pages.  The canvas tag is what we will use later to render WebGL.</p>
<p>At this point you can open index.html in a browser and see that the javascript is running.  Better yet, we can locally host this as a website using the webpack dev server.  This can give you hot module swapping, which makes iterating really fast.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm install webpack-dev-server -save-dev</div></pre></td></tr></table></figure>
<p>To run with the dev server, try this:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; ./node_modules/.bin/webpack-dev-server --inline --hot --progress --colors --open</div></pre></td></tr></table></figure></p>
<p>This should open your browser for you, and if you make changes, the browser will automatically reload after you save so you can see the result instantly.<br><figure class="highlight javascript"><figcaption><span>src/app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="string">'hot swap'</span>);</div></pre></td></tr></table></figure></p>
<p>Next let’s move the webpack commands into package.json. Replace the existing script tag with this:<br><figure class="highlight"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">  "build": "./node_modules/.bin/webpack --progress --colors",</div><div class="line">  "start": "./node_modules/.bin/webpack-dev-server --inline --hot --progress --colors --open"</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>This is a nice thing to do in case you publish this on npm.  Folks can just install your package, and build it without knowledge of the specific build tools you used. It’s also easier to execute than digging into node_modules and remembering all the flags.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm run build</div></pre></td></tr></table></figure>
<p>Or to launch the dev server:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; npm run start</div></pre></td></tr></table></figure>
<p>Finally, let’s check what we have into git.  We don’t want to check in the node_modules though, so add a .gitignore file:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">echo</span> <span class="string">"node_modules"</span> &gt; .gitignore</div></pre></td></tr></table></figure></p>
<p>And now, commit it to your repo.  We even commit ./bin/* because we want the project to work with github pages (more on this in another post).<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; git add -A</div><div class="line">&gt; git commit -m <span class="string">"setup webpack and npm package"</span></div><div class="line">&gt; git push</div></pre></td></tr></table></figure></p>
<p>That’s all for part 1.  You can find the end result here: <a href="https://github.com/brandf/brandf-environment-part1.git" target="_blank" rel="external">https://github.com/brandf/brandf-environment-part1.git</a></p>
<p>In part 2 we’ll hook up babel, eslint, and start writing some modern javascript code.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;With modern browsers, node.js, and github, the javascript ecosystem has grown tremendously.  While the language is evolving, user adoptio
    
    </summary>
    
      <category term="Coding" scheme="https://brandf.github.io/categories/Coding/"/>
    
    
      <category term="webgl" scheme="https://brandf.github.io/tags/webgl/"/>
    
      <category term="webpack" scheme="https://brandf.github.io/tags/webpack/"/>
    
      <category term="babel" scheme="https://brandf.github.io/tags/babel/"/>
    
      <category term="es2015" scheme="https://brandf.github.io/tags/es2015/"/>
    
      <category term="javascript" scheme="https://brandf.github.io/tags/javascript/"/>
    
      <category term="node" scheme="https://brandf.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://brandf.github.io/2016/10/02/hello-world/"/>
    <id>https://brandf.github.io/2016/10/02/hello-world/</id>
    <published>2016-10-02T17:28:38.417Z</published>
    <updated>2016-10-11T17:31:54.408Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my new blog!</p>
<p>A bit about me…I’m a software developer, and I’m interested in platforms and game development. I’ve worked on platforms at Microsoft and HBO, and soon I’ll be joining Facebook to help bring VR to the web.</p>
<p>I’m not sure how this blog will evolve, but the plan is to post about web development, WebGL, WebVR, Chromium, electronics, racing drones, and whatever other topics interest me.</p>
<p>That’s it for now, just wanted to say hi.  Stay tuned!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my new blog!&lt;/p&gt;
&lt;p&gt;A bit about me…I’m a software developer, and I’m interested in platforms and game development. I’ve worked
    
    </summary>
    
    
  </entry>
  
</feed>
